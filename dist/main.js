(()=>{"use strict";var t={771:(t,e,n)=>{n.d(e,{Z:()=>m});var o=n(15),r=n.n(o),a=n(645),i=n.n(a),s=n(434),c=n(667),l=n.n(c),u=n(910),d=n(322),p=i()(r());p.i(s.Z);var f=l()(u),A=l()(d);p.push([t.id,'section {\n  margin: 50px;\n  background-color: aqua;\n  opacity: 50%;\n  width: 500px;\n  height: 300px;\n}\n\n.hide {\n  display: none;\n}\n\nimg {\n  height: 100px;\n  width: 100px;\n  margin-right: 100px;\n}\n\n.draggable {\n  position: absolute;\n  cursor: pointer;\n}\n\n.drop-effect {\n  background: green;\n}\n\n.wrong {\n  left: 200px;\n}\n\n.right {\n  left: 400px;\n}\n@font-face {\n  font-family: "PWApril";\n  src: url('+f+');\n}\n\n@font-face {\n  font-family: "SuperKid";\n  src: url('+A+');\n}\n\nbody {\n  font-family: "SuperKid";\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-family: "PWApril";\n  font-size: 200%;\n}\n',"",{version:3,sources:["webpack://./src/styles/index.css"],names:[],mappings:"AAEA;EACE,YAAY;EACZ,sBAAsB;EACtB,YAAY;EACZ,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,WAAW;AACb;AACA;EACE,sBAAsB;EACtB,4CAAgC;AAClC;;AAEA;EACE,uBAAuB;EACvB,4CAAiC;AACnC;;AAEA;EACE,uBAAuB;AACzB;;AAEA;;;;;;EAME,sBAAsB;EACtB,eAAe;AACjB",sourcesContent:['@import "reset.css";\n\nsection {\n  margin: 50px;\n  background-color: aqua;\n  opacity: 50%;\n  width: 500px;\n  height: 300px;\n}\n\n.hide {\n  display: none;\n}\n\nimg {\n  height: 100px;\n  width: 100px;\n  margin-right: 100px;\n}\n\n.draggable {\n  position: absolute;\n  cursor: pointer;\n}\n\n.drop-effect {\n  background: green;\n}\n\n.wrong {\n  left: 200px;\n}\n\n.right {\n  left: 400px;\n}\n@font-face {\n  font-family: "PWApril";\n  src: url("../fonts/PWApril.ttf");\n}\n\n@font-face {\n  font-family: "SuperKid";\n  src: url("../fonts/SuperKid.ttf");\n}\n\nbody {\n  font-family: "SuperKid";\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-family: "PWApril";\n  font-size: 200%;\n}\n'],sourceRoot:""}]);const m=p},434:(t,e,n)=>{n.d(e,{Z:()=>s});var o=n(15),r=n.n(o),a=n(645),i=n.n(a)()(r());i.push([t.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n    v2.0 | 20110126\n    License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n    v2.0 | 20110126\n    License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const s=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,o){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(o)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(r[i]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);o&&r[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}t.exports=function(t){var n,o,r=(o=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null!=n){var o,r,a=[],i=!0,s=!1;try{for(n=n.call(t);!(i=(o=n.next()).done)&&(a.push(o.value),!e||a.length!==e);i=!0);}catch(t){s=!0,r=t}finally{try{i||null==n.return||n.return()}finally{if(s)throw r}}return a}}(n,o)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(t,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[1],i=r[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),u=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[a].concat(u).concat([l]).join("\n")}return[a].join("\n")}},667:t=>{t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},695:t=>{var e={};t.exports=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}},379:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var a={},i=[],s=0;s<t.length;s++){var c=t[s],l=o.base?c[0]+o.base:c[0],u=a[l]||0,d="".concat(l," ").concat(u);a[l]=u+1;var p=n(d),f={css:c[1],media:c[2],sourceMap:c[3]};-1!==p?(e[p].references++,e[p].updater(f)):e.push({identifier:d,updater:r(f,o),references:1}),i.push(d)}return i}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var a=o(t=t||[],r=r||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var s=n(a[i]);e[s].references--}for(var c=o(t,r),l=0;l<a.length;l++){var u=n(a[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=c}}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o=n.css,r=n.media,a=n.sourceMap;r?t.setAttribute("media",r):t.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},910:(t,e,n)=>{t.exports=n.p+"bea0763a288c0fd5bfb5.ttf"},322:(t,e,n)=>{t.exports=n.p+"fc19ccd3a442ee69170e.ttf"}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return t[o](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var o=e.getElementsByTagName("script");o.length&&(t=o[o.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{var t={};n.r(t);var e=n(379),o=n.n(e),r=n(795),a=n.n(r),i=n(695),s=n.n(i),c=n(216),l=n.n(c),u=n(771),d={styleTagTransform:function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}},setAttributes:function(t){var e=n.nc;e&&t.setAttribute("nonce",e)},insert:function(t){var e=s()("head");if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(t)}};d.domAPI=a(),d.insertStyleElement=l(),o()(u.Z,d),u.Z&&u.Z.locals&&u.Z.locals;const p=(t,e,n,o)=>{let r=!1;return{setCompletionStatus:()=>r=!r,getCompletionStatus:()=>r,getStory:()=>t,getImages:()=>e,getQuestion:()=>n,getChapterNumber:()=>o}},f="Placeholder story. Placeholder story. Placeholder story. Placeholder story. Placeholder story. Placeholder story.",A="Is it good question?",m=p(f,[{cssClass:"drop-container",url:"https://images.unsplash.com/photo-1548802673-380ab8ebc7b7?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=750&q=80"},{cssClass:"right",url:"https://images.unsplash.com/photo-1548802673-380ab8ebc7b7?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=750&q=80"},{cssClass:"wrong",url:"https://images.unsplash.com/photo-1592194996308-7b43878e84a6?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=668&q=80"}],A,1),h=p(f,[{cssClass:"drop-container",url:"https://images.unsplash.com/photo-1518717758536-85ae29035b6d?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8ZG9nc3xlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60"},{cssClass:"right",url:"https://images.unsplash.com/photo-1518717758536-85ae29035b6d?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8ZG9nc3xlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60"},{cssClass:"wrong",url:"https://images.unsplash.com/photo-1568572933382-74d440642117?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=750&q=80"}],A,2),g=p(f,[{cssClass:"drop-container",url:"https://images.unsplash.com/photo-1559818454-1b46997bfe30?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=668&q=80"},{cssClass:"right",url:"https://images.unsplash.com/photo-1559818454-1b46997bfe30?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=668&q=80"},{cssClass:"wrong",url:"https://images.unsplash.com/photo-1523362628745-0c100150b504?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1786&q=80"}],A,3);function b(...t){const e=document.querySelector("#content");e.textContent="",t.forEach((t=>{e.append(t)}))}const C=(t,e)=>{t.classList.add("draggable"),t.addEventListener("mousedown",(n=>{n.preventDefault();const o=n.pageX-t.getBoundingClientRect().left,r=n.pageY-t.getBoundingClientRect().top,a=t.getBoundingClientRect().height,i=t.getBoundingClientRect().width,s=e.getBoundingClientRect().top,c=e.getBoundingClientRect().bottom,l=e.getBoundingClientRect().left,u=e.getBoundingClientRect().right,d=e=>{e.pageX-o>l&&e.pageX-o+i<u&&(t.style.left=e.pageX-o+"px"),e.pageY-r>s&&e.pageY-r+a<c&&(t.style.top=e.pageY-r+"px")};document.addEventListener("mousemove",d),document.addEventListener("mouseup",(()=>{document.removeEventListener("mousemove",d)}))}))};let y;const x=(t,e)=>{const n=()=>{const n=t.getImages(),o=document.createElement("div");for(let t of n){const e=document.createElement("img");e.src=t.url,e.classList.add(t.cssClass),"drop-container"!==t.cssClass&&C(e,y),o.append(e)}return((n,o,r)=>{let a,i,s,c=!1;new MutationObserver((()=>{a=o.getBoundingClientRect().top,i=o.getBoundingClientRect().bottom,s=o.getBoundingClientRect().left;const t=n.getBoundingClientRect().top,e=n.getBoundingClientRect().bottom,r=n.getBoundingClientRect().left,l=(i-a)/2,u=a+l,d=s+l,p=(e-t)/2,f=t+p,A=r+p,m=Math.abs(u-f),h=Math.abs(d-A);Math.sqrt(m**2+h**2)<l+p?(c=!0,o.classList.add("drop-effect")):(c=!1,o.classList.remove("drop-effect"))})).observe(n,{attributes:!0});const l=()=>{c&&(n.style.left=s+"px",n.style.top=a+"px",e(t),document.removeEventListener("mouseup",l))};document.addEventListener("mouseup",l)})(o.querySelector(".right"),o.querySelector(".drop-container")),o};return(()=>{y=document.createElement("section");const{homeButton:e,nextChapterButton:o}=(()=>{const t=document.createElement("button"),e=document.createElement("button");return t.textContent="home",t.classList.add("home"),e.textContent="--\x3e",e.classList.add("next"),{homeButton:t,nextChapterButton:e}})(),r=document.createElement("p"),a=document.createElement("p"),i=n();return o.style.visibility="hidden",r.textContent=t.getStory(),a.textContent=t.getQuestion(),y.append(e,o,r,a,i),y})()},v=(t=>{let e=[],n=!1;return{addChapters:(...t)=>{t.forEach((t=>{e.push(t)}))},findFirstChapter:()=>e.find((t=>1===t.getChapterNumber())),findNextChapter:t=>{const n=t.getChapterNumber();return e.find((t=>t.getChapterNumber()===n+1))},getTitle:()=>"Cool story",setCompletionStatus:()=>n=!n,getCompletionStatus:()=>n,getFinalQuizzes:()=>e.reduce(((t,e,n)=>(n%2==0&&t.push(e.quiz),t)),[])}})();v.addChapters(m,g,h);const w=(e=>{const n=t=>{const e=((t,e,n,o)=>{const r=document.createElement("div");r.setAttribute("id","chapter-end");const a=document.createElement("p");a.textContent=`Chapter ${t} complete!`;const i=document.createElement("button");i.textContent="Next Chapter",i.addEventListener("click",(()=>{b(n)}));const s=document.createElement("button");return s.textContent="Back To Home",s.addEventListener("click",(()=>{})),r.appendChild(a),r.appendChild(i),r})(t.getChapterNumber(),0,o(t));b(e)},o=o=>{o.setCompletionStatus();const r=e.findNextChapter(o);return r?x(r,n):(()=>{const n=e.getTitle();return(0,t.createStoryEnd)(n)})()};return{startFirstChapter:()=>{const t=e.findFirstChapter();return x(t,n)}}})(v).startFirstChapter(),E=((t,e)=>{const n=document.createElement("h1");n.id="title",n.textContent="Unnamed Game";const o=document.createElement("p");o.id="description",o.textContent="Lorem ipsum dolor sit amet, consectetur adipiscing elit. In gravida consectetur est at pharetra. Cras quis arcu convallis magna egestas feugiat.";const r=document.createElement("button");r.id="start-game-button",r.textContent="Start game",r.addEventListener("click",(()=>b(w)));const a=document.createElement("button");a.id="how-to-play-button",a.textContent="How to play";const i=document.createElement("div");return i.id="main-menu",i.appendChild(n),i.appendChild(o),i.appendChild(r),i.appendChild(a),i})();b(E)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,